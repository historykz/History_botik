import time
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
)

BOT_TOKEN = '8491036994:AAEsFy6M0uzsua3XFPsOt_g7rNd4zq7CbTk'
ADMIN_IDS = [5048547918]

reply_map = {}
last_user_messages = {}
user_warnings = {}
banned_users = {}
MAX_WARNINGS = 3
BLOCK_TIME = 60

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
banned_words = [
    "–º–∞—Ç", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "–ø–æ—Ä–Ω–æ", "sex", "—Å—É–∫–∞", "–±–ª—è–¥—å",
    "–∏–¥–∏–æ—Ç", "–ª–æ—Ö", "—Ç–≤–∞—Ä—å", ".exe", ".bat", ".zip", ".rar"
    "—Å–ø–∞–º",
    "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "—Ä–∞—Å—Å—ã–ª–∫–∞", "—Ä–∞–∑–¥–∞—á–∞", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "crypto",
    "–∑–∞—Ä–∞–±–æ—Ç–∞–π –ª–µ–≥–∫–æ", "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "–≤–ª–æ–∂–∏ –æ–¥–∏–Ω —Ä–∞–∑",
    "–ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ", "–ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ", "–∂–º–∏ —Å—é–¥–∞", "–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É",
    "—Å–∫–∞—á–∞–π —Ñ–∞–π–ª", "–ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø", "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞ –¥–æ–º—É",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π", "–±—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏", "—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç", "–∫–∞–∑–∏–Ω–æ",
    "—Å—Ç–∞–≤–∫–∏", "–ø–∞—Ä–∏", "–±–µ—Ç—Ç–∏–Ω–≥", "—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è", "–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ—à–µ–≤–ª–µ –Ω–µ –±—É–¥–µ—Ç"
    "–≥–∞–Ω–¥–æ–Ω", "–∫–æ—Ç–∞–∫–±–∞—Å", "–º–∞–ª", "—à–µ—à–µ–Ω", "—à—à–Ω",  "—Å–∫–∞", "–ø–∏–¥—Ä", "—Å–µ–∫—Å", "–∫–∞–∑–∏–∫", "–≥–µ–π",  "—É–µ–±–æ–∫", "—Ç–µ–ª–∫–∞", "—à–ª—é—Ö–∞", "–º–∞–º–∫–∞", "–µ–±–∞–ª", "—Ç—Ä–∞–Ω—Å", "—Å—É—á–∫–∞", "–µ–±—É—Ç", "—Å—É–∫–∏–Ω", "–ø–∏–∑–¥–∞",   "–µ–±–∞–Ω—ã–π", "–µ–±–∞–Ω–∞—è",  "–≤—ã–µ–±—É",  "–Ω–∞—Ö—É–π", "–º—Ä–∞–∑—å",  "–µ–±–ª–∏–≤–∞—è",  "—Ö—É–π–Ω–∏",  "–µ–±–∞–Ω–æ–π", "–µ–±–ª–∏–≤–∞—è",  "—Å—É—É–∫–∞", "–Ω–µ–≥—Ä", "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞"                    
]

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
blacklisted_domains = [
    "pornhub.com", "xvideos.com", "xnxx.com", 
    "ok.ru", "onlyfans.com"
    "bit.ly", "goo.gl",
    "anonfiles.com", "disk.yandex", "dropbox.com"

]

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
blacklisted_file_ext = [
    ".exe", ".bat", ".cmd", ".scr", ".pif", ".jar", ".vbs",
    ".msi", ".apk", ".zip", ".rar", ".7z"
]


# === –ö–æ–º–∞–Ω–¥–∞ /rules ===
async def handle_rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:*\n\n"
        "1. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É\n"
        "2. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º\n"
        "3. üö´ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã\n"
        "4. üîÅ –ü–æ–≤—Ç–æ—Ä –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â—ë–Ω\n"
        "5. ‚è± –ó–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n\n"
        "‚úÖ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º."
    )
    await update.message.reply_text(rules_text, parse_mode="Markdown")


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í—ã –Ω–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ ¬´–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ | –ï–ù–¢ 2026¬ª üá∞üáø\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï—Ä–ª–∞–Ω ‚Äî —Ä–∞–¥ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n"
        "                                          \n"
        "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω‚ùì\n"
        "üìú –¢–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_text)
    await handle_rules_command(update, context)


# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç ===
async def handle_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or "–ë–µ–∑ username"
    now = time.time()

    if user_id in banned_users:
        if now < banned_users[user_id]:
            return
        else:
            del banned_users[user_id]
            user_warnings[user_id] = 0

    text = update.message.text.strip().lower() if update.message.text else ""

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    if last_user_messages.get(user_id) == text:
        await update.message.reply_text("üö´ –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
        return
    last_user_messages[user_id] = text

    # –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
    for word in banned_words:
        if word in text:
            await update.message.reply_text("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")
            user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
            return

    # –§–∏–ª—å—Ç—Ä –¥–æ–º–µ–Ω–æ–≤
    for domain in blacklisted_domains:
        if domain in text:
            await update.message.reply_text("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –¥–æ–º–µ–Ω.")
            user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
            return

    # –§–∏–ª—å—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if update.message.document:
        filename = update.message.document.file_name.lower()
        for ext in blacklisted_file_ext:
            if filename.endswith(ext):
                await update.message.reply_text("üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
                return

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    if user_warnings.get(user_id, 0) >= MAX_WARNINGS:
        banned_users[user_id] = now + BLOCK_TIME
        await update.message.reply_text("üîí –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω—É
    sent = None
    if update.message.text:
        sent = await context.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text=f"üì® –û—Ç @{username} (ID: {user_id}):\n\n{update.message.text}"
        )
    elif update.message.photo:
        sent = await context.bot.send_photo(
            chat_id=ADMIN_IDS[0],
            photo=update.message.photo[-1].file_id,
            caption=f"üì∏ –§–æ—Ç–æ –æ—Ç @{username} (ID: {user_id})"
        )
    elif update.message.document:
        sent = await context.bot.send_document(
            chat_id=ADMIN_IDS[0],
            document=update.message.document.file_id,
            caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç @{username} (ID: {user_id})"
        )
    elif update.message.video:
        sent = await context.bot.send_video(
            chat_id=ADMIN_IDS[0],
            video=update.message.video.file_id,
            caption=f"üìπ –í–∏–¥–µ–æ –æ—Ç @{username} (ID: {user_id})"
        )

    if sent:
        reply_map[sent.message_id] = user_id


# === –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    reply = update.message.reply_to_message
    if not reply:
        return

    original_msg_id = reply.message_id
    if original_msg_id not in reply_map:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return

    user_id = reply_map[original_msg_id]

    try:
        if update.message.text:
            await context.bot.send_message(chat_id=user_id, text=update.message.text)
        elif update.message.photo:
            await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id)
        elif update.message.document:
            await context.bot.send_document(chat_id=user_id, document=update.message.document.file_id)
        elif update.message.video:
            await context.bot.send_video(chat_id=user_id, video=update.message.video.file_id)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ /ban, /unban, /stats ===
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /ban <user_id> <–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö>")
        return

    try:
        user_id = int(args[0])
        minutes = int(args[1])
        banned_users[user_id] = time.time() + minutes * 60
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {minutes} –º–∏–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    try:
        user_id = int(context.args[0])
        if user_id in banned_users:
            del banned_users[user_id]
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /unban <user_id>")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    total_users = len(last_user_messages)
    total_banned = len(banned_users)
    total_warnings = sum(user_warnings.values())

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_banned}\n"
        f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–π: {total_warnings}"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /warnings ===
async def warnings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /warnings <user_id>")
        return
    try:
        user_id = int(context.args[0])
        warns = user_warnings.get(user_id, 0)
        await update.message.reply_text(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {warns} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

# === –ö–æ–º–∞–Ω–¥–∞ /clearwarns ===
async def clearwarns_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if len(context.args) != 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /clearwarns <user_id> <–∫–æ–ª-–≤–æ>")
        return
    try:
        user_id = int(context.args[0])
        count = int(context.args[1])
        current = user_warnings.get(user_id, 0)
        user_warnings[user_id] = max(0, current - count)
        await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Ç–µ–ø–µ—Ä—å {user_warnings[user_id]} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# === –ö–æ–º–∞–Ω–¥–∞ /warn ===
async def warn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /warn <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    try:
        user_id = int(context.args[0])
        reason = " ".join(context.args[1:])
        user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        if user_warnings[user_id] >= MAX_WARNINGS:
            banned_users[user_id] = time.time() + BLOCK_TIME
            await update.message.reply_text(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
user_filter = ~filters.User(user_id=ADMIN_IDS)
app.add_handler(MessageHandler((filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL) & user_filter, handle_user))

# –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
admin_reply_filter = filters.User(user_id=ADMIN_IDS) & filters.REPLY & ~filters.COMMAND
app.add_handler(MessageHandler((filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO) & admin_reply_filter, handle_admin_reply))

# –ö–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", handle_start_command))
app.add_handler(CommandHandler("rules", handle_rules_command))
app.add_handler(CommandHandler("ban", ban_command))
app.add_handler(CommandHandler("unban", unban_command))
app.add_handler(CommandHandler("stats", stats_command))
app.add_handler(CommandHandler("warnings", warnings_command))
app.add_handler(CommandHandler("clearwarns", clearwarns_command))
app.add_handler(CommandHandler("warn", warn_command))


print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
